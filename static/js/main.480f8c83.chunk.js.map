{"version":3,"sources":["components/WrappedCounter.js","actions/index.js","components/App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["connect","state","console","log","count","increment","type","decrement","props","onClick","App","combineReducers","e","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","store","createStore","reducers","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kOA6BeA,eARS,SAACC,GAGrB,OAFAC,QAAQC,IAAI,QAASF,GAGjB,CAACG,MAAOH,EAAMG,SAIkB,CAACC,UC7BhB,iBAAO,CAACC,KAAM,cD6BwBC,UC5BtC,iBAAO,CAACD,KAAM,eD4BxBN,EAzBQ,SAACQ,GAKpB,OAJAN,QAAQC,IAAI,+BACZD,QAAQC,IAAI,QAASK,GAIjB,6BACI,uCACA,4BAAKA,EAAMJ,OACX,6BACA,4BAAQK,QAASD,EAAMD,WAAvB,aAJJ,OAMI,4BAAQE,QAASD,EAAMH,WAAvB,iBENGK,EAPH,WAER,OADAR,QAAQC,IAAI,oBAER,kBAAC,EAAD,OCJOQ,cAAgB,CAC3BP,MAAO,eAACA,EAAD,uDAAS,EAAGQ,EAAZ,6CAA8B,cAAXA,EAAEN,KAAyBF,EAAQ,EAAiB,cAAXQ,EAAEN,KAAyBF,EAAQ,EAAKA,KCSzGS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfqB,UAAUC,cAAcQ,YAI1B7B,QAAQC,IACN,iHAKEkB,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBxB,QAAQC,IAAI,sCAGRkB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,MCvFjEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUC,MAAOC,YAAYC,IACzB,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDOrB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,IAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,IAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLhC,QAAQC,IACN,oEAvFAwD,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCvB,QAAQC,IACN,iHAMJgB,EAAgBC,EAAOC,OChC/BE,I","file":"static/js/main.480f8c83.chunk.js","sourcesContent":["import React from \"react\";\nimport {connect} from 'react-redux'\nimport {increment, decrement} from '../actions'\n\nconst WrappedCounter = (props) => {\n    console.log('WrappedCounter.js component');\n    console.log('props', props);\n\n\n    return (\n        <div>\n            <h1>result:</h1>\n            <h2>{props.count}</h2>\n            <br/>\n            <button onClick={props.decrement}>decrement</button>\n            &nbsp;\n            <button onClick={props.increment}>increment</button>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    console.log('state', state);\n\n    return (\n        {count: state.count}\n    )\n};\n\nexport default connect(mapStateToProps, {increment: increment, decrement: decrement})(WrappedCounter)\n","export const increment = () => ({type: 'INCREMENT'});\nexport const decrement = () => ({type: 'DECREMENT'});\n","import React from \"react\";\nimport WrappedCounter from \"./WrappedCounter\";\n\nconst App = () => {\n    console.log('App.js component')\n    return (\n        <WrappedCounter/>\n    )\n};\n\nexport default App\n","import {combineReducers} from \"redux\";\n\nexport default combineReducers({\n    count: (count = 0, e) => (e.type === 'INCREMENT') ? (count + 1) : (e.type === 'DECREMENT') ? (count - 1) : count\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport App from \"./components/App\";\nimport reducers from './reducers'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={createStore(reducers)}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}